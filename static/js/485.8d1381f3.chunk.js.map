{"version":3,"file":"static/js/485.8d1381f3.chunk.js","mappings":"8LAGO,MAAMA,EAAOC,EAAAA,EAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oCAIhBC,EAAOJ,EAAAA,EAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2EAMhBI,GAAYP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAYS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+F,aCPrC,MA6BA,EA7BmBO,IAAiB,IAAhB,OAAEC,GAAQD,EAC5B,MAAME,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAACf,EAAI,CAAAgB,SACFJ,EAAOK,OAAS,GACjBL,EAAOM,KAAIC,IAAoB,IAAnB,GAAEC,EAAE,MAAEC,GAAOF,EACvB,OACEJ,EAAAA,EAAAA,KAACV,EAAI,CAAAW,UACHD,EAAAA,EAAAA,KAACP,EAAS,CAACc,GAAE,WAAAC,OAAaH,GAAMI,MAAO,CAAEC,KAAMZ,GAAWG,SACzDK,KAFQD,EAIJ,KAGN,C,0FCjBJ,MAAMM,EAAUzB,EAAAA,EAAO0B,IAAGxB,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0BAIpBwB,EAAY3B,EAAAA,EAAO4B,GAAEtB,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sB,sBCHlC,MAkBA,EAlBa0B,KACb,MAAOlB,EAAQmB,IAAaC,EAAAA,EAAAA,UAAU,IAStC,OAPAC,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,MACCC,MAAKC,IAAWL,EAAUK,EAAO,IAEjCC,OAAMC,GAASC,QAAQD,MAAMA,EAAME,UAAS,GAC5C,KAGDC,EAAAA,EAAAA,MAACf,EAAO,CAAAV,SAAA,EACND,EAAAA,EAAAA,KAACa,EAAS,CAAAZ,SAAC,sBACRJ,EAAOK,SAAUF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAAC9B,OAAQA,MAChC,C,kFCjBZ+B,EAAAA,EAAMC,SAASC,QAAU,+BACzB,MAAMC,EAAU,mCAGHZ,EAAgBa,UAC3B,MAAMC,EAAS,CACbC,QAASH,EACTI,KAAM,IAEF,KAAEC,SAAeR,EAAAA,EAAMS,IAAI,sBAAuB,CAAEJ,WAC1D,OAAOG,EAAKE,OAAO,EAIRC,EAAoBP,UAC/B,MAAMC,EAAS,CACbC,QAASH,EACTI,KAAM,EACNK,UAEI,KAAEJ,SAAeR,EAAAA,EAAMS,IAAI,gBAAiB,CAAEJ,WAEpD,OADAT,QAAQiB,IAAIL,EAAKE,SACVF,EAAKE,QAAQI,QAAOC,GACzBA,EAAMrC,MAAMsC,cAAcC,SAASL,EAAMI,gBAC1C,EAGUE,EAAgBd,UAC3B,MAAMC,EAAS,CACbC,QAASH,EACTI,KAAM,IAEF,KAAEC,SAAeR,EAAAA,EAAMS,IAAI,UAAD7B,OAAWuC,GAAW,CAAEd,WACxD,OAAOG,CAAI,EAIAY,EAAYhB,UACvB,MAAMC,EAAS,CACbC,QAASH,EACTI,KAAM,EACNc,SAAU,SAEX,IACD,MAAM,KAAEb,SAAeR,EAAAA,EAAMS,IAAI,UAAD7B,OAAWuC,EAAO,YAAY,CAAEd,WAChE,OAAOG,CACT,CAAE,MAAOb,GAEP,MADAC,QAAQD,MAAMA,EAAME,SACd,IAAIyB,MAAM,uBAClB,GAIaC,EAAenB,UAC1B,MAAMC,EAAS,CACbC,QAASH,EACTI,KAAM,EACNc,SAAU,UAEN,KAAEb,SAAeR,EAAAA,EAAMS,IAAI,UAAD7B,OAAWuC,EAAO,YAAY,CAAEd,WAEhE,OADAT,QAAQiB,IAAIL,GACLA,EAAKE,OAAO,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/services.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;","import { useLocation } from 'react-router-dom' \nimport PropTypes from 'prop-types';\n\nimport { List, Item, MovieLink } from './MoviesList.styled';\n\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation(); \n\n  return (\n    <List> \n      {movies.length > 0 && \n      movies.map(({ id, title }) => {\n        return (\n          <Item key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n            </MovieLink>\n          </Item>\n        );\n      })}\n    </List>\n\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n\n","import styled from \"@emotion/styled\";\n\n\n\nexport const HomeBox = styled.div`\npadding: 24px;\n`;\n\nexport const HomeTitle = styled.h1`\nmargin: 0;\n`;","import { useEffect, useState } from 'react' \nimport { fetchTrending } from 'services/services'; \nimport { HomeBox, HomeTitle } from './Home.styled'; \nimport MoviesList from 'components/MoviesList/MoviesList'; \n\nconst Home = () => {\nconst [movies, setMovies] = useState ([]);\n\nuseEffect(() => {\n  fetchTrending ()\n  .then(answer => {setMovies(answer)\n  })\n  .catch(error => console.error(error.message));\n}, []);\n\nreturn (\n  <HomeBox>\n    <HomeTitle>Trending movies</HomeTitle>\n    {!!movies.length && <MoviesList movies={movies}/>}\n  </HomeBox>\n);\n};\n\nexport default Home;\n\n","import axios from 'axios'; \n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6cbea8cece37cf85eba0b83585dd8520';\n\n\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    page: 1, \n  }; \n  const { data } = await axios.get('/trending/movie/day', { params });\n  return data.results;\n};\n\n\nexport const fetchSearchResult = async query => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    query,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  console.log(data.results)\n  return data.results.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n};\n\nexport const fetchOneMovie = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  return data;\n};\n\n\nexport const fetchCast = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n   try{  \n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  return data;\n} catch (error) {\n  console.error(error.message);\n  throw new Error('Failed to fetch cast');\n}\n};\n\n\nexport const fetchReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n  console.log(data);\n  return data.results;\n  \n};\n\n"],"names":["List","styled","ul","_templateObject","_taggedTemplateLiteral","Item","li","_templateObject2","MovieLink","Link","_templateObject3","_ref","movies","location","useLocation","_jsx","children","length","map","_ref2","id","title","to","concat","state","from","HomeBox","div","HomeTitle","h1","Home","setMovies","useState","useEffect","fetchTrending","then","answer","catch","error","console","message","_jsxs","MoviesList","axios","defaults","baseURL","API_KEY","async","params","api_key","page","data","get","results","fetchSearchResult","query","log","filter","movie","toLowerCase","includes","fetchOneMovie","movieId","fetchCast","language","Error","fetchReviews"],"sourceRoot":""}