{"version":3,"file":"static/js/186.08aa2396.chunk.js","mappings":"+MAKA,MAwCA,EAxCgBA,KACd,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,QAAEC,IAAYC,EAAAA,EAAAA,MAYlB,SAASC,EAAWC,GAClB,MAAMC,EAAO,IAAIC,KAAKF,GAEtB,OADmBG,EAAAA,EAAAA,IAAOF,EAAM,wBAGpC,CAEA,OAjBAG,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,IAAaR,GACVS,MAAKC,GAAWZ,EAAWY,KAC3BC,OAAMC,IACLC,QAAQD,MAAMA,EAAME,SACpBhB,EAAW,GAAG,GACd,GACH,CAACE,KAWFe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGpB,EAAQqB,OAAS,GAChBH,EAAAA,EAAAA,KAAA,MAAAE,SACGpB,EAAQsB,KAAIC,IACXC,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CAAI,WAASG,EAAOE,WACpBD,EAAAA,EAAAA,MAAA,KAAAJ,SAAA,CAAG,mBAAiBf,EAAWkB,EAAOG,gBACtCR,EAAAA,EAAAA,KAAA,KAAAE,SAAIG,EAAOI,YAHJJ,EAAOK,SAQpBV,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wDAEJ,C,kFCvCPS,EAAAA,EAAMC,SAASC,QAAU,+BACzB,MAAMC,EAAU,mCAGHC,EAAgBC,UAC3B,MAAMC,EAAS,CACbC,QAASJ,EACTK,KAAM,IAEF,KAAEC,SAAeT,EAAAA,EAAMU,IAAI,sBAAuB,CAAEJ,WAC1D,OAAOG,EAAKzB,OAAO,EAIR2B,EAAoBN,UAC/B,MAAMC,EAAS,CACbC,QAASJ,EACTK,KAAM,EACNI,UAEI,KAAEH,SAAeT,EAAAA,EAAMU,IAAI,gBAAiB,CAAEJ,WAEpD,OADAnB,QAAQ0B,IAAIJ,EAAKzB,SACVyB,EAAKzB,QAAQ8B,QAAOC,GACzBA,EAAMC,MAAMC,cAAcC,SAASN,EAAMK,gBAC1C,EAGUE,EAAgBd,UAC3B,MAAMC,EAAS,CACbC,QAASJ,EACTK,KAAM,IAEF,KAAEC,SAAeT,EAAAA,EAAMU,IAAI,UAADU,OAAW9C,GAAW,CAAEgC,WACxD,OAAOG,CAAI,EAIAY,EAAYhB,UACvB,MAAMC,EAAS,CACbC,QAASJ,EACTK,KAAM,EACNc,SAAU,SAEX,IACD,MAAM,KAAEb,SAAeT,EAAAA,EAAMU,IAAI,UAADU,OAAW9C,EAAO,YAAY,CAAEgC,WAChE,OAAOG,CACT,CAAE,MAAOvB,GAEP,MADAC,QAAQD,MAAMA,EAAME,SACd,IAAImC,MAAM,uBAClB,GAIazC,EAAeuB,UAC1B,MAAMC,EAAS,CACbC,QAASJ,EACTK,KAAM,EACNc,SAAU,UAEN,KAAEb,SAAeT,EAAAA,EAAMU,IAAI,UAADU,OAAW9C,EAAO,YAAY,CAAEgC,WAEhE,OADAnB,QAAQ0B,IAAIJ,GACLA,EAAKzB,OAAO,C","sources":["components/Reviews/Reviews.jsx","services/services.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { format } from 'date-fns'\nimport { fetchReviews } from 'services/services';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(results => setReviews(results))\n      .catch(error => {\n        console.error(error.message);\n        setReviews([]);\n      });\n  }, [movieId]);\n\n  \n    function formatDate(dateString) {\n      const date = new Date(dateString);\n      const formatDate = format(date, \"yyyy-MM-dd (HH:mm:ss)\")\n      return formatDate;\n\n  }\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>Date of create: {formatDate(review.created_at)}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>SORRY! But We don't have any revies for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n\n","import axios from 'axios'; \n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6cbea8cece37cf85eba0b83585dd8520';\n\n\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    page: 1, \n  }; \n  const { data } = await axios.get('/trending/movie/day', { params });\n  return data.results;\n};\n\n\nexport const fetchSearchResult = async query => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    query,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  console.log(data.results)\n  return data.results.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n};\n\nexport const fetchOneMovie = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  return data;\n};\n\n\nexport const fetchCast = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n   try{  \n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  return data;\n} catch (error) {\n  console.error(error.message);\n  throw new Error('Failed to fetch cast');\n}\n};\n\n\nexport const fetchReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n  console.log(data);\n  return data.results;\n  \n};\n\n"],"names":["Reviews","reviews","setReviews","useState","movieId","useParams","formatDate","dateString","date","Date","format","useEffect","fetchReviews","then","results","catch","error","console","message","_jsx","_Fragment","children","length","map","review","_jsxs","author","created_at","content","id","axios","defaults","baseURL","API_KEY","fetchTrending","async","params","api_key","page","data","get","fetchSearchResult","query","log","filter","movie","title","toLowerCase","includes","fetchOneMovie","concat","fetchCast","language","Error"],"sourceRoot":""}